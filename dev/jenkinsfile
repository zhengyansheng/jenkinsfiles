

// setBuildDisplayName 设置构建显示的名称
def setBuildDisplayName() {
    // 定义日期时间格式：年-月-日 时:分:秒
    def dateFormat = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
    def currentDateTime = dateFormat.format(new Date())
    def description = currentBuild.displayName + "\n" + "$currentDateTime"
    currentBuild.description = "时间: $currentDateTime" + "\n" + "分支: xx" + "\n" + "环境: xx" + "\n" + "用户: ${env.EXECUTE_JOB_USER_ID}"
}

// CheckoutCode 克隆代码
def checkoutCode(gitUrl, branch, credentialsId) {
    // Clean workspace before checking out code
    deleteDir()
    checkout scmGit(
        userRemoteConfigs: [[credentialsId:  credentialsId, url: gitUrl]],
        branches: [[name: branch]]
    )
}

// executeBuild 执行构建
def executeBuild(codeType, serviceName, envName) {
    switch(codeType.toLowerCase()) {
        case 'java':
            buildJava()
            break
            
        case 'nodejs':
            buildNodejs()
            break
            
        case 'go':
            buildGolang()
            break
            
        default:
            error "不支持的构建类型: ${codeType}"
    }
}

def buildPushImage() {
    println("build push image")
}

def deployToCluster() {
    println("deployment")
}


def buildJava() {
    println("java")
}

def buildNodejs() {
    println("nodejs")
}

def buildGolang() {
    println("go")
}



// 流水线
pipeline {

    // 执行的节点
    agent any

    // 运行时工具
    tools {
      go 'go123'
    }
    
    // 环境变量
    environment {
      GOPROXY = "https://goproxy.cn,direct"
      // 仓库证书
      REPO_CREDENTID = "macmacmac"
    }


    // 参数
    parameters {
        choice(name: 'action', choices: ['构建', '打包', '部署', '回滚'], description: '操作的指令')
        choice(name: 'branch', choices: ['master', 'qa', 'uat', 'dev'], description: '分支或Tag名称')
    }

    // 阶段
    stages {
        stage('🔧 初始化 | Initialization') {
            steps {
                echo '初始化'
                
                wrap([$class: 'BuildUser']) {
                    script {
                        echo "触发用户ID: ${env.BUILD_USER_ID}"      // 如 'admin'
                        env.EXECUTE_JOB_USER_ID = "${env.BUILD_USER_ID}"
                    }
                }
                
                script {

                    setBuildDisplayName()

                }
            }
        }

        stage('📥 检出代码 | Checkout Code') {
            steps {
                echo '检出代码'
                
                script {

                    // TODO: 后期使用共享库的方式
                    // 定义变量和函数
                    def serviceMap = [
                        "shark": [
                            "codeType": "go",
                            "repoUrl": "git@github.com:zhengyansheng/httpserver2.git"
                        ]
                    ]

                    def getServiceInfo = { String serviceName ->
                        return serviceMap.get(serviceName)
                    }



                    def info = getServiceInfo("shark")
                    if (info) {
                        // echo "代码类型: ${info.codeType}"
                        // echo "仓库地址: ${info.repoUrl}"
                        checkoutCode(info.repoUrl, params.branch, env.REPO_CREDENTID)

                        // 赋值 下文取
                        env.CODE_TYPE = info.codeType
                        // env.SERVICE_NAME = "shark"
                    } else {
                        error "服务不存在: shark"
                    }

                    sh '''
                    ls -l
                    pwd
                    '''
                    
                }
            }
        }

        stage('⚙️ 编译 | Build') {
            steps {
                echo '编译'

                script {

                    // def codeType = env.CODE_TYPE  // env 是 Jenkins 内置环境变量对象
                    // println(codeType)
                    executeBuild(env.CODE_TYPE, "shark", "dev")

                }
            }
        }

        stage('🐳 构建推送镜像 | Build & Push Image') {
            steps {
                echo '构建和推送镜像'

                script {

                    buildPushImage()

                }
            }
        }
        
        stage('🚀 部署 | Deployment') {
            steps {
                echo '部署'

                script {

                    deployToCluster()

                }
            }
        }

    }

    // 钩子
    post {
      always {
            script {
                println("job执行结束")
            }
      }
      aborted {
            script {
                println("job终止")
            }
      }
      success {
            script {
                println("job执行成功")
            }
      }
      failure {
            script {
                println("job执行失败")
            }
      }
    }


}
